@Library('pgr_automation_libraries') _  

def common = new org.pgr.pipeline.utilities.common()

def artifactoryURL = "http://192.168.1.130:8081"
def imageRepo = "devops-docker-local"

def dockerFileTagMap = [
  ["./docker/Dockerfile.24.0.6", "24.0.6"]
]

pipeline {
  environment {
    DOCKER_REGISTRY_URL = "http://192.168.1.130:5000"
    DOCKER_REGISTRY_CRDS = "nexus" // Replace with correct credential ID
  }
  agent {
    kubernetes {
      label 'k8-jenkins'
      defaultContainer 'jnlp'
      yaml kubernetesAgent("http://192.168.1.120:8070")
    }
  }
  stages {
    stage('Lint Dockerfile') {
      steps {
        container('hadolint-agent') {
          script {
            dockerFileTagMap.each { filenameTagPair ->
              def dockerfile = filenameTagPair[0]
              sh """
                echo "Running hadolint for Dockerfile: ${dockerfile}"
                hadolint ${dockerfile} || true
              """
            }
          }
        }
      }
    }
    stage('Build & Push') {
      steps {
        container('docker-agent') {
          script {
            echo "Building and pushing Docker images to Artifactory"
            def BRANCH_NAME = env.GIT_BRANCH?.split("/")?.getAt(1) ?: 'default-branch'
            def envType = (BRANCH_NAME == 'master') ? 'prod' : 'nonprod'
            echo "Environment Type: ${envType}"
            echo "Branch Name: ${BRANCH_NAME}"
            
            docker.withRegistry("${env.DOCKER_REGISTRY_URL}", "${env.DOCKER_REGISTRY_CRDS}") {
              dockerFileTagMap.each { filenameTagPair ->
                def dockerfile = filenameTagPair[0]
                def tag = filenameTagPair[1]
                def imageTag = "${imageRepo}:${tag}"
                sh """
                  docker build -t ${imageTag} -f ${dockerfile} .
                  docker push ${imageTag}
                """
              }
            }
          }
        }
      }
    }
  }
}
