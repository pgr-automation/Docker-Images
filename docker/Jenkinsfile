@Library('pgr_automation_libraries@main') _  

def common = new org.pgr.pipeline.utilities.common()

def gitrepoName = ""
def artifactoryURL = "http://192.168.1.130:8081"
def imageRepo = "devops-docker-local"
def buildYamlPath = "../agentPods.yaml"

def dockerFileTagMap = [
  ["./docker/Dockerfile.24.0.6", "24.0.6"]
]

pipeline {
  environment {
    DOCKER_REGISTRY_URL = "192.168.1.130:5000"
    DOCKER_REGISTRY_CRDS = "nexus"
  }
  agent {
    kubernetes {
      label 'k8-jenkins'
      defaultContainer 'jnlp'
      yamlFile "../agentPods.yaml"
    }
  }
  stages {
    stage('Lint Dockerfile') {
      steps {
        container('hadolint-agent') {
          script {
            dockerFileTagMap.each { filenameTagPair ->
              if (filenameTagPair.size() >= 1) { 
                def dockerfile = filenameTagPair[0]
                echo "Running dockerLint for Dockerfile: ${dockerfile}"
                sh """
                  hadolint ${dockerfile} || true
                """
              } else {
                error("Invalid dockerFileTagMap entry: ${filenameTagPair}")
              }
            }
          }
        }
      }
    }
    stage('Build & Push') {
      steps {
        container('docker-agent') {
          script {
            echo "Image build and push to artifactory"
            def branchName = env.BRANCH_NAME //?: 'nonprod' // Default to 'nonprod'
            def envType = (branchName == 'main') ? 'prod' : 'nonprod'
            dockerFileTagMap.each { filenameTagPair ->
              if (filenameTagPair.size() >= 1) {
                def dockerfile = filenameTagPair[0]
                def tag = filenameTagPair[1]
                echo "Building Docker image from: ${dockerfile}, Tag: ${tag}"

                sh """
                  echo "Env Type: ${envType}"
                  echo "Branch Name: ${branchName}"
                  docker build -t test -f ${dockerfile} --network=host .
                """
              } else {
                error("Invalid dockerFileTagMap entry: ${filenameTagPair}") 
              }
            }
          }
        }
      }
    }
  }
}
