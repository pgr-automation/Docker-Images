// @Library('pgr_automation_libraries@master') _  

// def common = new org.pgr.pipeline.utilities.common()
def gitorgName = "pgr-automation"
def gitrepoName = "builder-Images"
def artifactoryURL = "http://192.168.1.130:8081"
def imageRepo = "192.168.1.139:32000"
def buildYamlPath = "../agentPod.yaml"
def nexusRepoKey = "pgr-devops-docker-local"

def dockerFileTagMap = [
  ["trivy/Dockerfile.trivy-v1", "trivy-v1"]
]

pipeline {
  // environment {
  //   // DOCKER_REGISTRY_URL = "192.168.1.130:5000"
  //   // DOCKER_REGISTRY_CRDS = "nexus"
  //   // BUILD_ID = "release-v1.31"
  // }
  agent {
    kubernetes {
      label 'builder-agent'
      // defaultContainer 'jnlp'
      yamlFile "../agentPod.yaml"
      // podRetention: never()
    }
  }
  stages {
    stage('Lint Dockerfiles') {
      steps {
        container('hadolint-agent') {
          script {
            dockerFileTagMap.each { filenameTagPair ->
              if (filenameTagPair.size() >= 1) { 
                def dockerfile = filenameTagPair[0]
                echo "Running dockerLint for Dockerfile: ${dockerfile}"
                sh """
                  hadolint ${dockerfile} || true
                """
              } else {
                error("Invalid dockerFileTagMap entry: ${filenameTagPair}")
              }
            }
          }
        }
      }
    }
    stage('Image Build & Push') {
      steps {
        container('docker-agent') {
          script {
            echo "Image build and push to artifactory"
            def branchName = env.BRANCH_NAME //?: 'nonprod' // Default to 'nonprod'
            def envType = (branchName == 'main') ? 'prod' : 'nonprod'
            dockerFileTagMap.each { filenameTagPair ->
              if (filenameTagPair.size() >= 1) {
                def dockerfile = filenameTagPair[0]
                def tag = filenameTagPair[1]
                def appName = filenameTagPair[0].split("/")[0]
                def imageTag = "$imageRepo/$nexusRepoKey/$gitrepoName/$appName:${tag}"
                currentBuild.displayName = "${tag} (#${env.BUILD_NUMBER})"
                echo "Building Docker image from: ${dockerfile}, Tag: ${tag}"
                withCredentials([usernamePassword(credentialsId: 'nexus-docker-registry', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                  sh """
                  echo "$DOCKER_PASS" | docker login ${imageRepo} -u "$DOCKER_USER" --password-stdin
                  docker build -t $imageTag  -f ${dockerfile} --network=host .
                  docker push $imageTag  
                  docker logout
                  """
                }


                // sh """
                //   echo "Env Type: ${envType}"
                //   echo "Branch Name: ${branchName}"
                //   ls -l
                //   ls /var/run/docker.sock
                //   docker build -t docker-${tag} -f ${dockerfile} --network=host .

                // """
              } else {
                error("Invalid dockerFileTagMap entry: ${filenameTagPair}") 
              }
            }
          }
        }
      }
    }
  }
}
